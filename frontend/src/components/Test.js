// import React, { useState, useRef } from 'react';
// import { FFmpeg } from '@ffmpeg/ffmpeg';
// import { fetchFile, toBlobURL } from '@ffmpeg/util';

// export default function Test() {
//     const [loaded, setLoaded] = useState(false);
//     const ffmpegRef = useRef(new FFmpeg());
//     const videoRef = useRef(null);
//     const messageRef = useRef(null);

//     const load = async () => {
//         const baseURL = 'https://unpkg.com/@ffmpeg/core@0.12.2/dist/umd'
//         const ffmpeg = ffmpegRef.current;
//         ffmpeg.on('log', ({ message }) => {
//             messageRef.current.innerHTML = message;
//             console.log(message);
//         });
//         // toBlobURL is used to bypass CORS issue, urls with the same
//         // domain can be used directly.
//         await ffmpeg.load({
//             coreURL: await toBlobURL(`${baseURL}/ffmpeg-core.js`, 'text/javascript'),
//             wasmURL: await toBlobURL(`${baseURL}/ffmpeg-core.wasm`, 'application/wasm'),
//         });
//         setLoaded(true);
//     }

//     const srtString = `1
// 00:00:00,000 --> 00:00:02,500
// This is the first subtitle.

// 2
// 00:00:03,000 --> 00:00:05,000
// And this is the second subtitle.

// 3
// 00:00:06,000 --> 00:00:09,000
// SRT files can have multiple subtitles.
// They are time-stamped and displayed sequentially.

// 4
// 00:00:10,000 --> 00:00:12,500
// Each subtitle has a unique number,
// a start time, and an end time.

// 5
// 00:00:14,000 --> 00:00:16,000
// You can include line breaks
// within a single subtitle.

// 6
// 00:00:17,500 --> 00:00:20,000
// Make sure to adhere to the format:
// Subtitle number, timecodes, and text.

// 7
// 00:00:21,000 --> 00:00:23,500
// SRT files are commonly used for
// adding subtitles to videos.

// 8
// 00:00:25,000 --> 00:00:28,000
// The time format is HH:MM:SS,MS
// where MS represents milliseconds.

// 9
// 00:00:30,000 --> 00:00:33,000
// Remember to save SRT files
// with the ".srt" file extension.

// 10
// 00:00:34,500 --> 00:00:37,000
// That's the end of this example
// SRT subtitles file.
// `;

//     const assString = `[Script Info]
// ; Script generated by FastSubtitles.com
// ; Created on 10-1-2023
// WrapStyle: 1
// ScaledBorderAndShadow: yes
// PlayResX: 1080
// PlayResY: 1920

// [V4+ Styles]
// Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, TertiaryColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding

// Style: Default,Arial,100,&H00FFFFFF,&H000000FF,&H80000000,&H80000000,0,0,0,0,100,100,0,0,1,2,0,5,30,30,10,1

// [Events]
// Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text

// Dialogue: 0,0:00:00.32,0:00:01.82,Default,,0,0,0,,top five unethical ways to make
// Dialogue: 0,0:00:01.89,0:00:04.99,Default,,0,0,0,,money part one fake apps you
// Dialogue: 0,0:00:05.06,0:00:06.59,Default,,0,0,0,,can easily download fake verses of
// `;

//     const transcode = async () => {
//         const ffmpeg = ffmpegRef.current;
//         await ffmpeg.writeFile('input.webm', await fetchFile('https://raw.githubusercontent.com/ffmpegwasm/testdata/master/Big_Buck_Bunny_180_10s.webm'));
//         // await ffmpeg.writeFile('tmp/Arial.ttf', await fetchFile('https://raw.githubusercontent.com/ffmpegwasm/testdata/master/arial.ttf'));
//         await ffmpeg.writeFile('tmp/Arial.ttf', await fetchFile('/assets/fonts/Arial.ttf'));
//         await ffmpeg.writeFile('subtitles.ass', assString);
//         await ffmpeg.exec([
//             '-i',
//             'input.webm',
//             '-vf',
//             // 'drawtext=fontfile=/arial.ttf:text=\'ffmpeg.wasm\':x=10:y=10:fontsize=24:fontcolor=white',
//             `subtitles=subtitles.ass:fontsdir=/tmp`,
//             'output.mp4',
//         ]);
//         const data = await ffmpeg.readFile('output.mp4');
//         videoRef.current.src =
//             URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));
//     }

//     return (loaded
//         ? (
//             <>
//                 <video ref={videoRef} controls></video><br />
//                 <button onClick={transcode}>Transcode webm to mp4 with text</button>
//                 <p ref={messageRef}></p>
//                 <p>Open Developer Tools (Ctrl+Shift+I) to View Logs</p>
//             </>
//         )
//         : (
//             <button onClick={load}>Load ffmpeg-core (~31 MB)</button>
//         )
//     );
// }



import React, { useState } from 'react';

export default function Test() {
    const [state, setState] = useState(false);

    function handleClick() {
        console.log(state);
        setState(!state);
        console.log(state);

        setTimeout(() => console.log(state), 0);
    }

    return (
        <div>
            <button onClick={e => handleClick()}>Test Button</button>
        </div>
    )
}



// import React, { useState, useRef } from 'react';
// import useHistory from '../hooks/useHistory';

// function Test() {
//     const [subtitles, setSubtitles, undoSubtitle, redoSubtitle] = useHistory([]);
//     const [input, setInput] = useState('');
//     const [loading, setLoading] = useState(false);

//     const inputRef = useRef();

//     // Function to handle changes to multiple states together
//     function handleCombinedChange(e) {
//         // Simulate a combined change
//         setLoading(true);

//         const newArr = [...subtitles, e.target.value];
//         setSubtitles([
//             { lines: [e.target.value] },
//             { lines: [e.target.value] },
//             { lines: [e.target.value] },
//             { lines: [e.target.value] }
//         ]);

//         setTimeout(() => {
//             setLoading(false);
//             setTimeout(() => {
//                 inputRef.current.focus();
//                 inputRef.current.selectionStart = 999;
//                 inputRef.current.selectionEnd = 999;
//             }, 0);
//         }, 0);
//     }

//     function undo() {
//         undoSubtitle();
//     }

//     function redo() {
//         redoSubtitle();
//     }

//     return (
//         <div>
//             <div>
//                 <h1>Subtitle Editor</h1>
//                 <div>
//                     <label>Subtitle Text:</label>
//                     {!loading && <input
//                         ref={inputRef}
//                         type="text"
//                         value={subtitles[0]?.lines[0]}
//                         onChange={(e) => handleCombinedChange(e)}
//                     />}
//                 </div>
//                 <div>
//                     <button onClick={undo}>
//                         Undo
//                     </button>
//                     <button onClick={redo}>
//                         Redo
//                     </button>
//                 </div>
//                 <div>
//                     {JSON.stringify(subtitles)}
//                 </div>
//             </div>
//         </div>
//     );
// }

// export default Test;



// import React, { useState } from 'react';
// import { useHistory } from '../contexts/HistoryContext';
// import HistoryItem from '../models/HistoryItem';

// export default function Test() {
//     const { undoStack, redoStack, activeHistoryItem, addToUndoStack, undo, redo } = useHistory();

//     const [randomNumberA, setRandomNumberA] = useState(0);
//     const [randomNumberB, setRandomNumberB] = useState(100);

//     function getRandomNumber(min, max) {
//         return Math.floor(Math.random() * (max - min + 1)) + min;
//     }

//     function handleAction() {
//         addToUndoStack(new HistoryItem({
//             storedStates: [
//                 [randomNumberA, setRandomNumberA],
//                 [randomNumberB, setRandomNumberB]
//             ]
//         }));

//         setRandomNumberA(getRandomNumber(1, 99));
//         setRandomNumberB(getRandomNumber(101, 199));
//     }

//     return (
//         <div>
//             <br></br>
//             <div>
//                 <button onClick={e => undo()}>Undo</button>
//             </div>
//             <br></br>
//             <div>
//                 <button onClick={e => redo()}>Redo</button>
//             </div>
//             <br></br>
//             <div>
//                 <button onClick={e => handleAction()}>Press To Generate New Random Numbers</button>
//             </div>
//             <br></br>
//             <div>
//                 Random Number A: {randomNumberA}
//             </div>
//             <div>
//                 Random Number B: {randomNumberB}
//             </div>
//         </div>
//     )
// }
